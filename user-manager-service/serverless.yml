service: user-manager-service

frameworkVersion: '2'

provider:
  name: aws
  runtime: nodejs14.x
  region: us-east-2
  stage: dev
  lambdaHashingVersion: 20201221

  environment:
   DYNAMODB_TABLE: ${self:service}-${opt:stage, self:provider.stage}
   My_Queue_URL: ${self:custom.MyQueue.url}
  iam:
   role:
    statements:
     - Effect: Allow
       Action:
          - dynamodb:Query
          - dynamodb:Scan
          - dynamodb:GetItem
          - dynamodb:PutItem
          - dynamodb:UpdateItem
          - dynamodb:DeleteItem
          
       Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.DYNAMODB_TABLE}"
     - Effect: Allow
       Action:
          - sqs:SendMessage
            
       Resource: ${self:custom.MyQueue.arn}


functions:
  create:
    handler: ./user/createUser.create
    events:
     - http:
        path: user
        method: post
  update:
    handler: ./user/updateUser.update
    events:
     - http:
        path: user/{id}
        method: post

  get:
    handler: ./user/getUsers.get
    events:
     - http:
        path: user/{id}
        method: get

  delete:
    handler: ./user/deleteUser.delete
    events:
     - http:
        path: user/{id}
        method: delete 
custom:
    MyQueue:
       arn: ${cf:notification-service-${self:provider.stage}.MyQueueArn}
       url: ${cf:notification-service-${self:provider.stage}.MyQueueUrl}
resources:
 Resources:
  usersTable:
    Type: 'AWS::DynamoDB::Table'
    Properties:
     AttributeDefinitions:
      - 
        AttributeName: id
        AttributeType: S
     KeySchema:
      - 
        AttributeName: id
        KeyType: HASH
     ProvisionedThroughput:
      ReadCapacityUnits: 1
      WriteCapacityUnits: 1
     TableName: ${self:provider.environment.DYNAMODB_TABLE}
